apply plugin: 'com.android.application'

android {

    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {

        applicationId "com.ks.bswhl.x7sy"
        minSdkVersion 21
        targetSdkVersion 28
        multiDexEnabled true
        versionCode 6
        versionName "6.0"
        ndk {
            abiFilters 'armeabi-v7a'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    // 配置结构
    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            assets.srcDirs = ['src/main/assets']
            res.srcDirs = ['src/main/res']
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/resources']
            aidl.srcDirs = ['src/main/aidl']
            renderscript.srcDirs = ['src/maom']
            jniLibs.srcDir 'src/main/jniLibs'
        }
    }

    //这个是解决lint报错的代码
    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        checkReleaseBuilds false//方法过时警告的开关
        disable 'InvalidPackage' //Some libraries have issues with this.
        disable 'OldTargetApi' //Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'IconDensities' //For testing purpose. This is safe to remove.
        disable 'IconMissingDensityFolder' //For testing purpose. This is safe to remove.
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    /**
     * 签名设置
     */
    signingConfigs {
        release {
            v1SigningEnabled true
            v2SigningEnabled true
            File propFile = file('../config/build-system/signing.properties');
            if (propFile.exists()) {
                def Properties props = new Properties()
                props.load(new FileInputStream(propFile))
                if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                        props.containsKey('KEY_ALIAS') &&
                        props.containsKey('KEY_PASSWORD')) {
                    storeFile file(props['STORE_FILE'])
                    storePassword props['STORE_PASSWORD']
                    keyAlias props['KEY_ALIAS']
                    keyPassword props['KEY_PASSWORD']
                }
            }
        }

        debug {
            v1SigningEnabled true
            v2SigningEnabled true
            File propFile = file('../config/build-system/signing.properties');
            if (propFile.exists()) {
                def Properties props = new Properties()
                props.load(new FileInputStream(propFile))
                if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                        props.containsKey('KEY_ALIAS') &&
                        props.containsKey('KEY_PASSWORD')) {
                    storeFile file(props['STORE_FILE'])
                    storePassword props['STORE_PASSWORD']
                    keyAlias props['KEY_ALIAS']
                    keyPassword props['KEY_PASSWORD']
                }
            }
        }
    }

    /**
     * 构建配置
     */
    buildTypes {

        release {
            //执行proguard混淆
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled false
            // 移除无用的resource文件
            shrinkResources false
            //签名
            signingConfig signingConfigs.release
        }

        debug {
            //不执行proguard
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled false
            // 移除无用的resource文件
            shrinkResources false
            //签名
            signingConfig signingConfigs.debug
        }
    }
}

dependencies {
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation("com.android.support:appcompat-v7:28.0.0")
    implementation("com.android.support:design:28.0.0")
    implementation("com.android.support:recyclerview-v7:28.0.0")
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    implementation("com.github.bumptech.glide:glide:4.4.0") {
        exclude group: 'com.android.support'
    }
    implementation fileTree(dir: 'aar', include: ['*.aar', '*.jar'], exclude: [])
    implementation project(path: ':sdk_core_standard_oaid_Adapter_xiao7')
    annotationProcessor 'com.github.bumptech.glide:compiler:4.4.0'
    implementation("jp.wasabeef:glide-transformations:3.0.1") {
        exclude group: 'com.github.bumptech.glide', module: 'glide'
    }
    implementation ('com.github.bumptech.glide:okhttp3-integration:4.4.0')
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'com.nostra13.universalimageloader:universal-image-loader:1.9.2'
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.alibaba:fastjson:1.1.34.android'
}

repositories {

    flatDir {
        dir "../${project.name}/aar"
    }

}
